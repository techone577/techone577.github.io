<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【LeetCode 3】Longest Substring Without Repeating Characters 无重复字符的最长子串</title>
      <link href="/2018/07/16/%5BLeetCode%203%5DLongest%20Substring%20Without%20Repeating%20Characters%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2018/07/16/%5BLeetCode%203%5DLongest%20Substring%20Without%20Repeating%20Characters%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-3-Longest-Substring-Without-Repeating-Characters-无重复字符的最长子串"><a href="#LeetCode-3-Longest-Substring-Without-Repeating-Characters-无重复字符的最长子串" class="headerlink" title="[LeetCode 3]Longest Substring Without Repeating Characters 无重复字符的最长子串"></a>[LeetCode 3]Longest Substring Without Repeating Characters 无重复字符的最长子串</h1><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h3><p>Given a string, find the length of the longest substring without repeating characters.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given &quot;abcabcbb&quot;, the answer is &quot;abc&quot;, which the length is 3.</span><br><span class="line"></span><br><span class="line">Given &quot;bbbbb&quot;, the answer is &quot;b&quot;, with the length of 1.</span><br><span class="line"></span><br><span class="line">Given &quot;pwwkew&quot;, the answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p><p><strong>说明</strong>：解集不能包含重复的子集。  </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。</span><br><span class="line"></span><br><span class="line">给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。</span><br><span class="line"></span><br><span class="line">给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。</span><br></pre></td></tr></table></figure><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p><strong>Solution 1</strong>: 遍历char数组，put到map&lt;字符，字符下标&gt;中，若当前元素在map中，则将下表置为当前元素在map中的重复值的角标+1,继续遍历，复杂度O(N<sup>2</sup>)</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><figcaption><span>beat 18%</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span> []array=s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(array[i]))&#123;</span><br><span class="line">                max=max&gt;map.size()?max:map.size();</span><br><span class="line">                i=map.get(array[i]);</span><br><span class="line">                map.clear();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(array[i],i);</span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;</span><br><span class="line">        max=max&gt;map.size()?max:map.size();</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Solution 2</strong>：（优化的滑动窗口）<br>(i,j)作为一个窗口，让j滑动，并将j位置的字符放到map中，当map包含j位置的字符时,(未优化的滑动窗口是让i滑动，直到i，j不包含重复字符串)，i取map中j字符所在位置+1和i的最大值（考虑baab字符串，就明白为什么i取两者之间的大者），向hashmap添加重复元素时会覆盖原来的值。时间复杂度为O(n)。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><figcaption><span>beat 67%</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(j)))&#123;</span><br><span class="line">                i=Math.max(map.get(s.charAt(j))+<span class="number">1</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">            max=Math.max(max,j-i+<span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(j),j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器下载文件</title>
      <link href="/2018/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="浏览器下载文件"><a href="#浏览器下载文件" class="headerlink" title="浏览器下载文件"></a>浏览器下载文件</h4><p>solution:读取文件,设置响应头，写入返回的流<br>前端用http请求而不能用ajax请求(JQuery的ajax函数的返回类型只有xml、text、json、html等类型，没有“流”类型，所以我们要实现ajax下载，不能够使用相应的ajax函数进行文件下载。) （前端用a标签自动点击）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/view"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/download"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTemplate</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//服务器下的相对路径</span></span><br><span class="line">        String path = <span class="string">"WEB-INF/document/template.csv"</span>;</span><br><span class="line">        <span class="comment">//通过相对路径获取真实路径</span></span><br><span class="line">        File csvFile = <span class="keyword">new</span> File(request.getServletContext().getRealPath(path));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ServletOutputStream out = response.getOutputStream();</span><br><span class="line">            FileInputStream csvInputStream = <span class="keyword">new</span> FileInputStream(csvFile);</span><br><span class="line">            BufferedOutputStream outputStream = <span class="keyword">new</span> BufferedOutputStream(out);</span><br><span class="line">            <span class="comment">//让服务器告诉浏览器它发送的数据属于什么文件类型</span></span><br><span class="line">            response.setContentType(<span class="string">"multipart/form-data"</span>);</span><br><span class="line">            <span class="comment">//inline 和 attachment：将文件内容直接显示在页面 attachment：弹出对话框让用户下载</span></span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;fileName="</span>+<span class="string">"test.csv"</span>);</span><br><span class="line">            response.addHeader(<span class="string">"Content-Length"</span>, String.valueOf(csvFile.length()));</span><br><span class="line">  <span class="comment">//设置缓冲区大小</span></span><br><span class="line">            <span class="keyword">byte</span> []buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((ch = csvInputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(buffer,<span class="number">0</span>,ch);</span><br><span class="line">            &#125;</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            csvInputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 377】 Combination Sum IV 组合总和 IV</title>
      <link href="/2018/06/01/%5BLeetCode%20377%5DCombinatiion%20Sum%20IV%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20IV/"/>
      <url>/2018/06/01/%5BLeetCode%20377%5DCombinatiion%20Sum%20IV%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20IV/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-377-Combinatiion-Sum-IV-组合总和-IV"><a href="#LeetCode-377-Combinatiion-Sum-IV-组合总和-IV" class="headerlink" title="[LeetCode 377]Combinatiion Sum IV 组合总和 IV"></a>[LeetCode 377]Combinatiion Sum IV 组合总和 IV</h1><h4 id="Problem-decription"><a href="#Problem-decription" class="headerlink" title="Problem decription:"></a>Problem decription:</h4><p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target. </p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nums = [1, 2, 3]</span><br><span class="line">target = 4</span><br><span class="line"></span><br><span class="line">The possible combination ways are:</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line"></span><br><span class="line">Note that different sequences are counted as different combinations.</span><br><span class="line"></span><br><span class="line">Therefore the output is 7.</span><br></pre></td></tr></table></figure><h4 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up:"></a>Follow up:</h4><p>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative numbers?</p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nums = [1, 2, 3]</span><br><span class="line">target = 4</span><br><span class="line"></span><br><span class="line">所有可能的组合为：</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line"></span><br><span class="line">请注意，顺序不同的序列被视作不同的组合。</span><br><span class="line"></span><br><span class="line">因此输出为 7。</span><br></pre></td></tr></table></figure><h4 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h4><p>如果给定的数组中含有负数会怎么样？<br>问题会产生什么变化？<br>我们需要在题目中添加什么限制来允许负数的出现？  </p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>使用动态规划和递归均可，创建一个dp数组，dp[i]表示和为i的正整数组合的个数，dp[0]=1,则从i=1到target遍历，对每一个i遍历数组中每个num，若i&gt;=num,则dp[i]+=dp[i-num],表示dp[3]=dp[2]+1 或 dp[1]+2 或 dp[0]+3,将所有情况累加就是dp[3]的结果,对原数组排序可对算法进行优化，当i&lt;num后面则不用判断直接break。(后面给出递归版本)</p><h4 id="Code-动态规划-："><a href="#Code-动态规划-：" class="headerlink" title="Code(动态规划)："></a>Code(动态规划)：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//beat 90%</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> []dp=<span class="keyword">new</span> <span class="keyword">int</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;target+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;num)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                dp[i]+=dp[i-num];</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code-递归-："><a href="#Code-递归-：" class="headerlink" title="Code(递归)："></a>Code(递归)：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;=num)</span><br><span class="line">            count+=combinationSum4(nums,target-num); </span><br><span class="line">            &#125;    </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AC beat 66.7%</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span>(map.containsKey(target))</span><br><span class="line">             <span class="keyword">return</span> map.get(target);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(target&gt;=num)</span><br><span class="line">                   count+=combinationSum4(nums,target-num); </span><br><span class="line">            &#125;</span><br><span class="line">        map.put(target,count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 394】 Decode String 字符串解码</title>
      <link href="/2018/06/01/%5BLeetCode%20394%5DDecode%20String%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/"/>
      <url>/2018/06/01/%5BLeetCode%20394%5DDecode%20String%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-394-Decode-String-字符串解码"><a href="#LeetCode-394-Decode-String-字符串解码" class="headerlink" title="[LeetCode 394]Decode String 字符串解码"></a>[LeetCode 394]Decode String 字符串解码</h1><h4 id="Problem-decription"><a href="#Problem-decription" class="headerlink" title="Problem decription:"></a>Problem decription:</h4><p>Given an encoded string, return it’s decoded string.</p><p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</span><br><span class="line">s = &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</span><br><span class="line">s = &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</span><br></pre></td></tr></table></figure><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 <strong>3a</strong> 或 <strong>2[4]</strong> 的输入。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><pre><code>s = &quot;3[a]2[bc]&quot;, 返回 &quot;aaabcbc&quot;.s = &quot;3[a2[c]]&quot;, 返回 &quot;accaccacc&quot;.s = &quot;2[abc]3[cd]ef&quot;, 返回 &quot;abcabccdcdcdef&quot;.</code></pre><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><p>首先想到的是递归，或者是用两个栈的非递归方法，非递归的效率更高一些。<br>一个栈用来保存数字，一个用来保存字符串，以 b3[a]2[c]d] 为例,遍历整个字符串，用t保存当前字符串，count保存当前数字，碰到字母就添加到t中，碰到数字便循环读取并转换成正确的格式，当读取到‘[’时，将count入数字栈，将当前字符入字符栈，并将t清空，当读取到‘]’时，去数字栈顶元素k与字符栈顶元素s，t=s+k个t，直至栈为空结束，t即为所求。</p><p><img src="/img/decodeString1.png" alt="1">  </p><p><img src="/img/decodeString2.png" alt="2"></p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><pre><code class="java"><span class="comment">//beat 50%</span><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>{        Stack&lt;Integer&gt; sNum=<span class="keyword">new</span> Stack&lt;Integer&gt;();        Stack&lt;String&gt; sStr=<span class="keyword">new</span> Stack&lt;String&gt;();        <span class="keyword">char</span>[] chr=s.toCharArray();        String t=<span class="string">""</span>;        String count=<span class="string">""</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chr.length;i++){            <span class="keyword">if</span>(chr[i]&gt;=<span class="string">'0'</span> &amp;&amp; chr[i]&lt;=<span class="string">'9'</span>){                <span class="keyword">while</span>(chr[i]!=<span class="string">'['</span>){                    count+=chr[i++];                }                sNum.push(Integer.parseInt(count));                count=<span class="string">""</span>;            }           <span class="keyword">else</span> <span class="keyword">if</span>(chr[i]&lt;<span class="string">'0'</span> || chr[i]&gt;<span class="string">'9'</span> &amp;&amp;chr[i]!=<span class="string">']'</span> &amp;&amp;chr[i]!=<span class="string">'['</span>)                t+=chr[i];           <span class="keyword">if</span>(chr[i]==<span class="string">'['</span>){            sStr.push(t);            t=<span class="string">""</span>;        }            <span class="keyword">if</span>(chr[i]==<span class="string">']'</span>){                <span class="keyword">int</span> k=<span class="number">1</span>;                <span class="keyword">if</span>(!sNum.isEmpty()){                    k=sNum.pop();                String top=sStr.pop();                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)                    top+=t;                  t=top;                    }            }        }        <span class="keyword">return</span> t;    }}</code></pre>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 363】Max Sum of Rectangle No Larger Than K</title>
      <link href="/2018/05/25/%5BLeetCode%20363%5D%20Max%20Sum%20of%20Rectangle%20No%20Larger%20Than%20K%20/"/>
      <url>/2018/05/25/%5BLeetCode%20363%5D%20Max%20Sum%20of%20Rectangle%20No%20Larger%20Than%20K%20/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-363-Max-Sum-of-Rectangle-No-Larger-Than-K"><a href="#LeetCode-363-Max-Sum-of-Rectangle-No-Larger-Than-K" class="headerlink" title="[LeetCode 363] Max Sum of Rectangle No Larger Than K"></a>[LeetCode 363] Max Sum of Rectangle No Larger Than K</h1><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h3><p>Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.</p><p><strong>Note</strong>:<br>The input is an array of integers. Only the <strong>least significant 8 bits</strong> of each integer is used to store the data. This means each integer represents only 1 byte of data.</p><h4 id="Example1"><a href="#Example1" class="headerlink" title="Example1:"></a>Example1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given matrix = [</span><br><span class="line">  [1,  0, 1],</span><br><span class="line">  [0, -2, 3]</span><br><span class="line">]</span><br><span class="line">k = 2</span><br></pre></td></tr></table></figure><p>The answer is <strong>2</strong>. Because the sum of rectangle <strong>[[0, 1], [-2, 3]]</strong> is 2 and 2 is the max number no larger than k (k = 2).</p><h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ol><li>The rectangle inside the matrix must have an area &gt; 0.</li><li>What if the number of rows is much larger than the number of columns?  </li></ol><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>给定一个非空的二位矩阵和一个整数K，找到矩阵中子矩阵和最大并且不超过k的最大值。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定矩阵 matrix = [</span><br><span class="line">  [1,  0, 1],</span><br><span class="line">  [0, -2, 3]</span><br><span class="line">]</span><br><span class="line">k = 2</span><br></pre></td></tr></table></figure><p>答案是<strong>2</strong>，因为矩形<strong>[[0, 1], [-2, 3]]</strong>和是2并且2 是不超过k（k=2）的最大值 。</p><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1:"></a>Solution1:</h4><blockquote><p>这道题用纯暴力只能过95%左右，后面几个用例都会超时，所以在暴力的基础上稍微改进一下即可通过。（但不是最优解，复杂度为O(N<sup>2</sup>M<sup>2</sup>)）</p></blockquote><p> 用一个新矩阵保存计算值，每个值表示从点（0,0）到（i,j）的和，则计算（x1,y1）到（x2,y2）的值有以下四种情况：  </p><ul><li>x1-1&lt;0 &amp;&amp; y1-1&lt;0: 说明（x1,y1）即为（0,0）点，直接返回存储矩阵中s[x2][y2]的值</li><li><p>x1-1&gt;=0 &amp;&amp; y1-1&lt;0: 说明y1=0，  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4</span><br><span class="line">-------</span><br><span class="line">5 6 7 8</span><br><span class="line">0 1 2 9</span><br><span class="line">-------</span><br><span class="line">计算从（1,0）到（3，3）的值</span><br></pre></td></tr></table></figure><p>则返回s[x2][y2]-s[x1-1][y2]</p></li></ul><ul><li><p>x1-1<0 &&="" y1-1="">=0: 说明x1=0，  </0></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1|2 3 4|</span><br><span class="line">5|6 7 8|</span><br><span class="line">0|1 2 9|</span><br><span class="line"></span><br><span class="line">计算从（0,1）到（3，3）的值</span><br></pre></td></tr></table></figure></li></ul><p>则返回s[x2][y2]-s[x2][y1-1]  </p><ul><li><p>x1-1&gt;=0 &amp;&amp; y1-1&gt;=0:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4</span><br><span class="line"> -------</span><br><span class="line">5|6 7 8|</span><br><span class="line">0|1 2 9|</span><br><span class="line"> -------</span><br></pre></td></tr></table></figure></li></ul><p>则返回s[x2][y2]-(s[x1-1][y2]+s[x2][y1-1]-s[x1-1][y1-1])  </p><blockquote><p>遍历子矩阵用四层循环即可解决。  </p></blockquote><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumSubmatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> row=matrix.length;</span><br><span class="line">        <span class="keyword">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> [][]store=<span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line">                store[i][j]=sum(matrix,<span class="number">0</span>,<span class="number">0</span>,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;row;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;col;y++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;row;i++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;col;j++)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> t=sSum(store,x,y,i,j);</span><br><span class="line">                    <span class="keyword">if</span>(t==k)</span><br><span class="line">                        <span class="keyword">return</span> t;</span><br><span class="line">                    <span class="keyword">if</span>(flag &amp;&amp; t&lt;k)&#123;</span><br><span class="line">                        max=t;</span><br><span class="line">                        flag=<span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(t&lt;k)&#123;</span><br><span class="line">                    max=Math.max(t,max);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sSum</span><span class="params">(<span class="keyword">int</span> [][]s,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2 )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x1-<span class="number">1</span>&lt;<span class="number">0</span> &amp;&amp; y1-<span class="number">1</span>&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> s[x2][y2];</span><br><span class="line">        <span class="keyword">if</span>(x1-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; y1-<span class="number">1</span>&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> s[x2][y2]-s[x1-<span class="number">1</span>][y2];</span><br><span class="line">        <span class="keyword">if</span>(x1-<span class="number">1</span>&lt;<span class="number">0</span> &amp;&amp; y1-<span class="number">1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> s[x2][y2]-s[x2][y1-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s[x2][y2]-(s[x1-<span class="number">1</span>][y2]+s[x2][y1-<span class="number">1</span>]-s[x1-<span class="number">1</span>][y1-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [][]matrix,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x1;i&lt;=x2;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=y1;j&lt;=y2;j++)&#123;  </span><br><span class="line">                res+=matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solution2-动态递归解法（学习后补充）"><a href="#Solution2-动态递归解法（学习后补充）" class="headerlink" title="Solution2:动态递归解法（学习后补充）"></a>Solution2:动态递归解法（学习后补充）</h4><p>首先使用动态规划解法，这道题目可以拆分成两道题。<br>第一点是求矩阵子矩阵最大和的动态规划思想，<a href="https://www.youtube.com/watch?v=yCQN096CwWM" target="_blank" rel="noopener">参考视频链接</a>。<br><img src="/img/matrix.png" alt="">  </p><p>具体思想就是，按列扫描累加每一列然后求最大值，这样就转换为一维数组子数组求最大和的问题，这是一个简单的动态规划，dp[i]=max(dp[i-1],array[i]);  </p><p>第二点就是一维数组子数组最大和有可能大于给定的k，所以问题转换为求一维数组子数组和不大于k的最大值：  </p><blockquote><p>通过累加和可以求得任意区间的和，例如，cum数组为累加和数组，cum[i]表示从cum[0]到cum[i]的和，则区间（i,j）的和可表示为cum[j]-cum[i-1];  </p></blockquote><p>这里还要借助TreeSet因为treeset中ceiling方法可以求出大于或等于给定的元素的最小元素，也就是说我们在累加过程中去比较max和set.ceiling(sum-k)的大小即可，由于treeset查询这一步时间复杂度是O(logn),所以总的时间复杂度是O(N2*M*log(M)),如果列数远远大于行数，可以按照行扫描。  </p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumSubmatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rowSize=matrix.length;</span><br><span class="line">        <span class="keyword">int</span> colSize=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> maxSum=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> currentSum=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// int maxLeft=0;</span></span><br><span class="line">       <span class="comment">// int maxRight=0;</span></span><br><span class="line">       <span class="comment">//  int maxUp=0;</span></span><br><span class="line">       <span class="comment">//  int maxDown=0;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> []rowArray=<span class="keyword">new</span> <span class="keyword">int</span>[rowSize];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left=<span class="number">0</span>;left&lt;colSize;left++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> right=left;right&lt;colSize;right++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowSize;i++)&#123;</span><br><span class="line">                    rowArray[i]+=matrix[i][right];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                currentSum=maxSubArray(rowArray,k);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(currentSum==k)</span><br><span class="line">                    <span class="keyword">return</span> k;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(currentSum&lt;k)</span><br><span class="line">                    maxSum=Math.max(currentSum,maxSum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowSize;i++)&#123;</span><br><span class="line">                    rowArray[i]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">       TreeSet&lt;Integer&gt; set=<span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        set.add(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">           sum+=a[i];</span><br><span class="line">           Integer v=set.ceiling(sum-k);<span class="comment">//返回大于或等于给定的元素的最小元素，或null</span></span><br><span class="line">           <span class="keyword">if</span>(v!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               max=Math.max(sum-v,max);</span><br><span class="line">           &#125;</span><br><span class="line">           set.add(sum);</span><br><span class="line">           </span><br><span class="line">       &#125; </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 393】UTF-8 Validation UTF-8 编码验证</title>
      <link href="/2018/05/25/%5BLeetCode%20393%5DUTF-8%20Validation%20UTF-8%20%E7%BC%96%E7%A0%81%E9%AA%8C%E8%AF%81/"/>
      <url>/2018/05/25/%5BLeetCode%20393%5DUTF-8%20Validation%20UTF-8%20%E7%BC%96%E7%A0%81%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-393-UTF-8-Validation-UTF-8-编码验证"><a href="#LeetCode-393-UTF-8-Validation-UTF-8-编码验证" class="headerlink" title="[LeetCode 393]UTF-8 Validation UTF-8 编码验证"></a>[LeetCode 393]UTF-8 Validation UTF-8 编码验证</h1><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h3><p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:</p><ul><li>For 1-byte character, the first bit is a 0, followed by its unicode code.  </li><li>For n-bytes character, the first n-bits are all one’s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.<br><strong>This is how the UTF-8 encoding would work:</strong>  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Char. number range  |        UTF-8 octet sequence</span><br><span class="line">      (hexadecimal)    |              (binary)</span><br><span class="line">   --------------------+---------------------------------------------</span><br><span class="line">   0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line">   0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p>Given an array of integers representing the data, return whether it is a valid utf-8 encoding.  </p><p><strong>Note</strong>:<br>The input is an array of integers. Only the <strong>least significant 8 bits</strong> of each integer is used to store the data. This means each integer represents only 1 byte of data.</p><h4 id="Example1"><a href="#Example1" class="headerlink" title="Example1:"></a>Example1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.</span><br><span class="line"></span><br><span class="line">Return true.</span><br><span class="line">It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.</span><br></pre></td></tr></table></figure><h4 id="Example2"><a href="#Example2" class="headerlink" title="Example2:"></a>Example2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.</span><br><span class="line"></span><br><span class="line">Return false.</span><br><span class="line">The first 3 bits are all one&apos;s and the 4th bit is 0 means it is a 3-bytes character.</span><br><span class="line">The next byte is a continuation byte which starts with 10 and that&apos;s correct.</span><br><span class="line">But the second continuation byte does not start with 10, so it is invalid.</span><br></pre></td></tr></table></figure><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>UTF-8 中的一个字符可能的长度为 <strong>1 到 4</strong> 字节，遵循以下的规则：</p><ul><li>对于 1 字节的字符，字节的第一位设为0，后面7位为这个符号的unicode码。</li><li>对于 n 字节的字符 (n &gt; 1)，第一个字节的前 n 位都设为1，第 n+1 位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li></ul><p><strong>这是 UTF-8 编码的工作方式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Char. number range  |        UTF-8 octet sequence</span><br><span class="line">     (hexadecimal)    |              (binary)</span><br><span class="line">  --------------------+---------------------------------------------</span><br><span class="line">  0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line">  0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">  0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">  0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p>给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。   </p><p><strong>说明</strong>：<br>输入是整数数组。只有每个整数的最低 8 个有效位用来存储数据。这意味着每个整数只表示 1 字节的数据。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [197, 130, 1], 表示 8 位的序列: 11000101 10000010 00000001.</span><br><span class="line"></span><br><span class="line">返回 true 。</span><br><span class="line">这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。</span><br></pre></td></tr></table></figure><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [235, 140, 4], 表示 8 位的序列: 11101011 10001100 00000100.</span><br><span class="line"></span><br><span class="line">返回 false 。</span><br><span class="line">前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。</span><br><span class="line">下一个字节是开头为 10 的延续字节，这是正确的。</span><br><span class="line">但第二个延续字节不以 10 开头，所以是不符合规则的。</span><br></pre></td></tr></table></figure><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><blockquote><p>一开始我理解出现错误认为只有一个utf-8编码让你判断，其实是判断一组连续的编码序列，也就是若干个utf-8序列。  </p></blockquote><p>不用位运算的方法，也就是将每个数据通过Integer.toBinaryString(data).toCharArray来判断。   </p><p>更简洁的做法是直接通过位运算来记录1的位数，过程如下:  </p><ol><li>data&gt;&gt;5==0b110 右移5位如果是0b110说明有2个字节，还有1个字节需要额外判断<br>（ 或者data &amp; 0b11000000==0b11000000,与上述功能一致  ）</li><li>data&gt;&gt;4==0b1110 右移4位如果是0b1110说明有3个字节，还有2个字节需要额外判断</li><li>data&gt;&gt;3==0b11110 右移3位如果是0b110说明有4个字节，还有3个字节需要额外判断</li><li>data&gt;&gt;7=0b1表示字符为10000000情况直接返回false  </li><li>如果bitSize==1，表示当前为utf—8编码的第一个字符，做以上判断</li><li>如果bitSize!=1，表示当前正在判断10开头的字符，如果data[i]&gt;&gt;6!=0b10，直接返回false</li></ol><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validUtf8</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bitSize=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bitSize==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">5</span>==<span class="number">0b110</span>) bitSize=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">4</span>==<span class="number">0b1110</span>) bitSize=<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">3</span>==<span class="number">0b11110</span>) bitSize=<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">7</span>==<span class="number">0b1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//10000000情况</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data[i]&gt;&gt;<span class="number">6</span>!=<span class="number">0b10</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                bitSize--;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bitSize==<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 70】Climbing Stairs 爬楼梯</title>
      <link href="/2018/05/25/%5BLeetCode%2070%5DClimbing%20Stairs%20%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2018/05/25/%5BLeetCode%2070%5DClimbing%20Stairs%20%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-70-Climbing-Stairs-爬楼梯"><a href="#LeetCode-70-Climbing-Stairs-爬楼梯" class="headerlink" title="[LeetCode 70]Climbing Stairs 爬楼梯"></a>[LeetCode 70]Climbing Stairs 爬楼梯</h1><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h3><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Note</strong>: Given n will be a positive integer.  </p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>假设你正在爬楼梯。需要 n 步你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>说明</strong>：给定 n 是一个正整数。  </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 步 + 1 步</span><br><span class="line">2.  2 步</span><br></pre></td></tr></table></figure><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>通过归纳可知符合斐波那契数列。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> f1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> f2=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line"></span><br><span class="line">            sum=f1+f2;</span><br><span class="line">            f1=f2;</span><br><span class="line">            f2=sum;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 01】 Two Sum 两数之和</title>
      <link href="/2018/05/24/%5BLeetCode%2001%5DTwo%20Sum%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2018/05/24/%5BLeetCode%2001%5DTwo%20Sum%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-01-Two-Sum-两数之和"><a href="#LeetCode-01-Two-Sum-两数之和" class="headerlink" title="[LeetCode 01]Two Sum 两数之和"></a>[LeetCode 01]Two Sum 两数之和</h1><h4 id="Problem-decription"><a href="#Problem-decription" class="headerlink" title="Problem decription:"></a>Problem decription:</h4><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.  </p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p><p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。  </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><ul><li>排序数组，用两个头尾指针遍历即可，排序复杂度为O(nlogn),空间复杂度为O(1)；</li><li><p>利用map，以&lt;值,数组下标&gt;方式储存，再遍历数组即可；  </p><p>这里采用第二种解法，要注意考虑数组中包含重复值的情况，在加入map的过程中要做判断；    </p></li></ul><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; h=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> []result=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h.containsKey(nums[i]) &amp;&amp; <span class="number">2</span>*nums[i]==target)&#123;</span><br><span class="line">                result[<span class="number">0</span>]=h.get(nums[i]);</span><br><span class="line">                result[<span class="number">1</span>]=i;</span><br><span class="line">                flag=<span class="keyword">false</span>;<span class="comment">// 如果在加入时的重复值即为结果，则后面无需执行</span></span><br><span class="line">            &#125;</span><br><span class="line">            h.put(nums[i],i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h.containsKey(target-nums[j]) &amp;&amp; target-nums[j]!=nums[j] &amp;&amp; flag)&#123;</span><br><span class="line">                result[<span class="number">0</span>]=j;</span><br><span class="line">                result[<span class="number">1</span>]=h.get(target-nums[j]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 48】Rotate Image 旋转图像</title>
      <link href="/2018/05/24/%5BLeetCode%2048%5DRotate%20Image%20%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
      <url>/2018/05/24/%5BLeetCode%2048%5DRotate%20Image%20%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-48-Rotate-Image-旋转图像"><a href="#LeetCode-48-Rotate-Image-旋转图像" class="headerlink" title="[LeetCode 48]Rotate Image 旋转图像"></a>[LeetCode 48]Rotate Image 旋转图像</h1><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h3><p>You are given an n x n 2D matrix representing an image.</p><p>Rotate the image by 90 degrees (clockwise).</p><h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.  </p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given input matrix =</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">rotate the input matrix in-place such that it becomes:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>给定一个 n × n 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h4><p>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。  </p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix =</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix =</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>将矩阵沿着主对角线翻转一次，再沿着对称线旋转一次即可。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//沿着主对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=matrix[i][j];</span><br><span class="line">                matrix[i][j]=matrix[j][i];</span><br><span class="line">                matrix[j][i]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//沿着对称轴线翻转</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n/<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=matrix[i][j];</span><br><span class="line">                matrix[i][j]=matrix[i][n-j-<span class="number">1</span>];</span><br><span class="line">                matrix[i][n-j-<span class="number">1</span>]=temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【LeetCode 78】Subsets 子集</title>
      <link href="/2018/05/24/%5BLeetCode%2078%5DSubsets%20%E5%AD%90%E9%9B%86/"/>
      <url>/2018/05/24/%5BLeetCode%2078%5DSubsets%20%E5%AD%90%E9%9B%86/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-78-Subsets-子集"><a href="#LeetCode-78-Subsets-子集" class="headerlink" title="[LeetCode 78]Subsets 子集"></a>[LeetCode 78]Subsets 子集</h1><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description:"></a>Problem description:</h3><p>Given a set of <strong>distinct</strong> integers, nums, return all possible subsets (the power set).</p><p><strong>Note</strong>: The solution set must not contain duplicate subsets.  </p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>给定一组<strong>不含重复元素</strong>的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p><strong>说明</strong>：解集不能包含重复的子集。  </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p><strong>Solution 1</strong>: 一个集合有n个元素，则其有2<sup>n</sup>的子集。  </p><p>列出从0到2<sup>n</sup>-1的所有二进制，0表示不取对应元素，1表示取对应元素，即可得出所有子集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">123Subset</span><br><span class="line">0000[]</span><br><span class="line">10013</span><br><span class="line">20102</span><br><span class="line">301123</span><br><span class="line">41001</span><br><span class="line">510113</span><br><span class="line">611012</span><br><span class="line">7111123</span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count=pow(<span class="number">2</span>,nums.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> []bit=Integer.toBinaryString(i).toCharArray();</span><br><span class="line">            ArrayList&lt;Integer&gt; temp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="comment">//从数组最后一位开始判断</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=bit.length-<span class="number">1</span>,k=nums.length-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--,k--)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(bit[j]==<span class="string">'1'</span>)</span><br><span class="line">                 temp.add(nums[k]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(temp);</span><br><span class="line">            res.add(temp);</span><br><span class="line">           temp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">            res*=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Solution 2</strong>：<br>深度优先算法，由于原集合每一个数字只有两种状态，要么存在，要么不存在，那么在构造子集时就有选择和不选择两种情况，所以可以构造一棵二叉树，左子树表示选择该元素，右子树表示不选择，最终的叶节点就是所有子集合，树的结构如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     []        </span><br><span class="line">                 /          \        </span><br><span class="line">                /            \     </span><br><span class="line">               /              \</span><br><span class="line">            [1]                []</span><br><span class="line">         /       \           /    \</span><br><span class="line">        /         \         /      \        </span><br><span class="line">     [1 2]       [1]       [2]     []</span><br><span class="line">    /     \     /   \     /   \    / \</span><br><span class="line">[1 2 3] [1 2] [1 3] [1] [2 3] [2] [3] []</span><br></pre></td></tr></table></figure><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; temp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        getSubList(nums,res,temp,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSubList</span><span class="params">(<span class="keyword">int</span> []nums,List&lt;List&lt;Integer&gt;&gt; res,ArrayList&lt;Integer&gt; temp,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList(temp));<span class="comment">//注意要new一个ArrayList对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;nums.length;i++)&#123;</span><br><span class="line">            temp.add(nums[i]);<span class="comment">//选择元素nums[i]</span></span><br><span class="line">            getSubList(nums,res,temp,i+<span class="number">1</span>);<span class="comment">//下一个元素</span></span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);<span class="comment">//不选择nums[i]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="/2018/05/22/MarkDown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/22/MarkDown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>为了顺畅的在github pages上书写自己的blog，需要学习一些基本的MarkDown语法。</p><h2 id="常用语法规则"><a href="#常用语法规则" class="headerlink" title="常用语法规则"></a>常用语法规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。快捷键：command + 1/2/3/4/5/6</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>只需在行末加两个空格键和一个回车键即可换行。快捷键：control + 回车键</p><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">加粗 - 快捷键：command + B   </span><br><span class="line">斜体 - 快捷键：command + I  </span><br><span class="line">删除线 - 快捷键：command + U  </span><br><span class="line">底纹  - 快捷键：command + K  </span><br><span class="line">下划线 - html：&lt;u&gt;text&lt;/u&gt;</span><br><span class="line">分割线 - 用***</span><br></pre></td></tr></table></figure><p><strong> 加粗 </strong> : <strong>hello</strong><br>* 斜体 *  :<em>hello</em><br>~~ 删除线 ~~  :<del>hello</del><br>` 底纹 `  :<code>hello</code><br>分割线：</p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. <u><strong>符号要和文字之间加上一个字符的空格</strong></u>。  </p><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><ul><li>a</li><li>b</li><li>c  </li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><ol><li>a</li><li>b</li><li>c</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p><blockquote><p>this is a quote</p></blockquote><h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>图片为：<code>![]()</code></p><p>链接为：<code>[]()</code>  </p><h5 id="在线插入："><a href="#在线插入：" class="headerlink" title="在线插入："></a>在线插入：</h5><p>插入图片的地址需要图床，这里推荐<a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="noopener">围脖图床修复计划</a>，生成URL  </p><h5 id="本地插入："><a href="#本地插入：" class="headerlink" title="本地插入："></a>本地插入：</h5><p><code>![](本地路径)</code>  </p><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p><img src="/img/1.png" alt="icon">  </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>使用三个`包裹代码即可 ,注意后面不要跟空格，hexo在生成网页时代码块之间匹配会出现问题 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用github pages + hexo搭建博客</title>
      <link href="/2018/05/22/%E4%BD%BF%E7%94%A8github%20pages%20+%20hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/05/22/%E4%BD%BF%E7%94%A8github%20pages%20+%20hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><br><blockquote class="blockquote-center"><p><em>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</em>  </p></blockquote></p><blockquote><p>目前比较热门的两种方式就是使用静态博客框架 jekyll 或者 hexo，相对于jekyll，hexo主题丰富，第三方插件优秀，配置简单，最主要的一点，hexo的开发文档阅读感受较jekyll来说更舒服。</p></blockquote><h3 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h3><blockquote><p>官方文档非常详细 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo documents</a>  </p></blockquote><p> <em>这里以MacOs为例</em></p><ul><li><p>github账号<br><a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">注册地址</a>  </p></li><li><p>安装<strong>Node.js</strong>  </p><p>  cURL:<br><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p>  Wget:<br><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p>  安装完成后重启终端：<br><code>$ nvm install stable</code>  </p><p>  这里推荐下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装程序</a>来安装</p></li><li>安装<strong>git</strong><br><code>$ brew install git</code>  </li><li>安装 Hexo<br><code>$ npm install -g hexo-cli</code>   </li></ul><h3 id="二-建站"><a href="#二-建站" class="headerlink" title="二.建站"></a>二.建站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folderName&gt;</span><br><span class="line">$ cd &lt;folderName&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>安装完成后文件目录结构如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">├── \_config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── \_drafts</span><br><span class="line">|   └── \_posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>你可以在_config.yml中配置大部分网站设置。  </p><p>其他一些Hexo常用命令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo n          # 新建文章，在\source\_posts文件夹里</span><br><span class="line">hexo new page   # 新建页面，比如想在导航栏新增一个“关于我”的页面</span><br><span class="line">hexo clean      # 清除本地的数据库和生成的public文件夹</span><br><span class="line">hexo g          # 生成博客文件</span><br><span class="line">hexo s          # 运行在本地浏览器，可当预览使用</span><br><span class="line">hexo d          # 部署博客到Github等</span><br></pre></td></tr></table></figure><h3 id="三-创建Repo"><a href="#三-创建Repo" class="headerlink" title="三.创建Repo"></a>三.创建Repo</h3><ul><li><p>新建一个repo，注意名称一定是your_username.github.io这样的格式。</p></li><li><p>进入刚新建的仓库，点击Setting，一直拖到最下面，选择Automatic Page Generator，随便选个主题然后发布即可。</p></li><li><p>在站点_config.yml文件中任意位置添加以下代码段：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  # 填上你自己的仓库名，注意后面有`.git`</span><br><span class="line">  repository: git@github.com:your_username/your_username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><em>注意每个：后面都要跟一个空格！</em></p><ul><li>安装部署所需：<br><code>$ npm install hexo-deployer-git --save</code></li></ul><h3 id="四-主题"><a href="#四-主题" class="headerlink" title="四.主题"></a>四.主题</h3><blockquote><p>创建 Hexo 主题非常容易，您只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构：  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── \_config.yml(配置是无需重启服务器会自动更新)</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">├── scripts</span><br><span class="line">└── source</span><br></pre></td></tr></table></figure><p>这里推荐使用最多的<em><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">nexT</a></em> 主题</p><h3 id="五-新建页面"><a href="#五-新建页面" class="headerlink" title="五.新建页面"></a>五.新建页面</h3><h5 id="新建分类页面："><a href="#新建分类页面：" class="headerlink" title="新建分类页面："></a>新建分类页面：</h5><pre><code>hexo new page categories</code></pre><p>打开<code>../source/categories/index.md</code>  </p><p>编辑相对应的type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-05-21 22:00:35</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在站点_config.yml中更改menu下代码，如果没有添加  </p><p>  categories: /categories/  </p><h4 id="新建导航"><a href="#新建导航" class="headerlink" title="新建导航"></a>新建导航</h4><p>默认导航栏只有首页、归档、标签、分类四项。如果想增加其他如C++、随笔等。需要打开\themes\next_config.yml找到如下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  archives: /archives</span><br><span class="line">  #这里是新增的，Coding是一级目录，C是二级目录，同理随笔是一级目录</span><br><span class="line">  c++: /categories/Coding/C/</span><br><span class="line">  python: /categories/Coding/Python/</span><br><span class="line">  essay: /categories/随笔/</span><br><span class="line">  #注意这里没有/categories</span><br><span class="line">  about: /about</span><br></pre></td></tr></table></figure><hr><p><strong><em>that‘s all！</em></strong></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
